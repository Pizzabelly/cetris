; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT CODE
;    1	#include <stdbool.h>
;    2	#include <stddef.h>
;    3	#include <stdint.h>
;    4	#include <tice.h>
;    5	
;    6	#include <math.h>
;    7	#include <stdio.h>
;    8	#include <stdlib.h>
;    9	#include <string.h>
;   10	
;   11	#include <graphx.h>
;   12	
;   13	#include "cetris.h"
;   14	
;   15	/* Include the sprite data */
;   16	#include "gfx/logo_gfx.h"
;   17	
;   18	void main(void) {
_main:
;   19	    /* Initialize the 8bpp graphics */
;   20	    gfx_Begin();
	CALL	_gfx_Begin
;   21	
;   22	    /* Set up the palette for our sprites */
;   23	    gfx_SetPalette(logo_gfx_pal, sizeof_logo_gfx_pal, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,16
	PUSH	BC
	LD	BC,_logo_gfx_pal
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;   24	
;   25	    /* Fill the screen with color index 0 */
;   26	    gfx_FillScreen(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;   27	
;   28	    /* Draw a bunch of different styled sprites on the screen */
;   29	    gfx_Sprite(block_1, 0, 0);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,_block_1_data
	PUSH	BC
	CALL	_gfx_Sprite
	POP	BC
	POP	BC
	POP	BC
;   30	    gfx_Sprite_NoClip(block_1, 32, 32);
	LD	BC,32
	PUSH	BC
	PUSH	BC
	LD	BC,_block_1_data
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;   31	    gfx_TransparentSprite(block_1, 64, 64);
	LD	BC,64
	PUSH	BC
	PUSH	BC
	LD	BC,_block_1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;   32	    gfx_TransparentSprite_NoClip(block_1, 96, 96);
	LD	BC,96
	PUSH	BC
	PUSH	BC
	LD	BC,_block_1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;   33	    gfx_ScaledSprite_NoClip(block_1, 128, 128, 2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	LD	BC,128
	PUSH	BC
	PUSH	BC
	LD	BC,_block_1_data
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   34	    gfx_ScaledTransparentSprite_NoClip(block_1, 128, 0, 3, 3);
	LD	BC,3
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,128
	PUSH	BC
	LD	BC,_block_1_data
	PUSH	BC
	CALL	_gfx_ScaledTransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   35	
;   36	    /* Wait for a key to be pressed */
;   37	    while (!os_GetCSC());
L_1:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_1
;   38	
;   39	    /* Close the graphics */
;   40	    gfx_End();
	CALL	_gfx_End
;   41	}
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_os_GetCSC                          IMPORT  -----   function
;_gfx_ScaledTransparentSprite_NoClip      IMPORT  -----   function
;_gfx_ScaledSprite_NoClip            IMPORT  -----   function
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_gfx_TransparentSprite              IMPORT  -----   function
;_gfx_Sprite_NoClip                  IMPORT  -----   function
;_block_1_data                       IMPORT     83   variable
;_gfx_Sprite                         IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;_logo_gfx_pal                       IMPORT     16   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


	XREF _logo_gfx_pal:ROM
	XREF _block_1_data:ROM
	XREF _gfx_ScaledTransparentSprite_NoClip:ROM
	XREF _gfx_ScaledSprite_NoClip:ROM
	XREF _gfx_TransparentSprite_NoClip:ROM
	XREF _gfx_TransparentSprite:ROM
	XREF _gfx_Sprite_NoClip:ROM
	XREF _gfx_Sprite:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _os_GetCSC:ROM
	XDEF _main
	END
